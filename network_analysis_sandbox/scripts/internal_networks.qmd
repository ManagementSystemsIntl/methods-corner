---
title: "Internal Mentoring and Tech Advice Networks"
author: "Brian Calhoon"
format: 
  html:
    toc: true
    code-fold: true
---

```{r echo = FALSE, output = FALSE}

#Run a prep script that includes necessary packages and some formatting thingies
source(here::here("network_analysis_sandbox/prep/prep.R"))
source(here::here("network_analysis_sandbox/prep/clean_data.R"))
```

# Introduction

At the January 9, 2023 all company Monday meeting, Melanie Murphy presented on the Advanced Analytics and Data Science team. At the end of her presentation, we requested those interested in engaging with this team to fill out a small survey about their analytics background and where they work within the company. The final two questions, however, asked about respondents' engagement with colleagues. They were:

* Who within MSI are you able to turn to for mentorship/career guidance? 
* Who within MSI do you turn to most often to discuss or get help on technical questions?

The responses to these questions are the topic at hand in this post. First, we will look at the different statistical and software skills, and then we will analyze the informal networks that have developed within MSI, one for mentoring and the other for specific technical questions. To help us make sense of the network statistics, we will simulate similar networks to help us understand the statistics in context. We will then compare these with the official organizational structure.

# Our methology and data
The data come from a voluntary, virtual survey that was distributed during a company meeting. The response rate was low so the Advanced Analytics team identified additional staff at the home office and on field teams to take the survey to give us a better picture of analytics at MSI. All names were anonymized. 

Let's start by looking at which analytical softwares are used most frequently by MSI staff.

# Summary Statistics

```{r, echo = FALSE, output = FALSE}
#importing and cleaning column names

df <- read_xlsx(here::here("network_analysis_sandbox/data/staff_survey_data_03-21.xlsx")) |>
  select(Name 
        , home_field = `Are you home office or field office staff?` 
        , practice_area = `Practice Area` 
        , training = `Training/Credential specific to data analytics` 
        , advanced_analyses = `Any specific advanced analyses you have conducted?`
        , software = `Any specific competencies with statistical analysis software?` 
        , aspirations = `Any specific aspirations for data analytics?`) |>
  filter(!is.na(Name))

```
We received `r nrow(df)` responses to the survey with `r nrow(df[df$home_field=="Home office",])` responses from home office staff and `r nrow(df[df$home_field=="Field office",])` responses from field office staff representing projects in Iraq, Nigeria, Jordan, and Zambia. 

```{r warning=FALSE}


#identifying the analytic softwares used at MSI

#find the individual softwares
softwares <- paste(c("R", "Stata", "SPSS", "Spss", "Nvivo", "Qualtrics", "MaxQDA"
                     , "Python", "ArcGIS", "Excel", "excel", "SAS"
                     , "EpiInfo", "STATA", "Kobo Tool Box", "Dedoose"
                     , "SMath Studio", "Tableau"), collapse = "|")


#create a new column that extracts the names of software used 
#then create another column that unnests any lists
df1 <- df |>
  mutate(new = str_extract_all(software, pattern = softwares)) |>
          unnest(new) 

#clean up a few software names
df1$new <- df1$new |>
  recode("STATA" = "Stata"
         , "Spss" = "SPSS"
         , "EXCEL" = "Excel") 

#then create a count of which software packages are used at MSI
df2 <- df1 |>
  filter(!is.na(new)) |>
  group_by(new) |>
  count() |>
  mutate(new2 = case_when(n == 1 ~ "Other"
                          , TRUE ~ new)) |>
  select("Software" = new2, "Count" = n, -new) |>
  arrange(desc(Count))


ggplot(data = df2
       , aes(reorder(factor(Software), -Count), Count)) +
  geom_point(size = 14, color = my_pal[[2]]) +
  geom_segment(aes(x = factor(df2$Software), xend = factor(df2$Software) 
               , y = 0, yend = df2$Count)
               , linewidth = 2
               , color = my_pal[[2]]
               , alpha = .7) +
  geom_text(aes(x = Software, y = Count, label = Count)
            , color = "white") +
  labs(title = "Most used analytic software packages"
       , subtitle = "Stata, SPSS, and R are the most commonly used."
       , y = "Number of staff"
       , x = "Software") + 
  scale_y_continuous(limits = c(0, 20))+
  theme.plot()

```

This includes all responses. Within this, the home office accounts for `r nrow(filter(df1, new == "Stata" & home_field=="Home office"))` Stata users,  `r nrow(filter(df1, new =="SPSS" & home_field=="Home office"))` SPSS users, and `r nrow(filter(df1, new == "R" & home_field=="Home office"))` R users. 

# Networks 
Next, let's look at the networks. We collected data for two networks -- one related to mentoring and another related to technical guidance, and then we decided to filter the data so that we only included survey SEA staff To understand the networks we have to identify the people and their connections. In network analysis these are called, nodes and edges, respectively. To better understand how this works let's look at an example of a dataframe that shows the ties and one that shows the nodes. 


```{r echo = FALSE, output = TRUE }
df <- read_xlsx(here::here("network_analysis_sandbox/data/staff_survey_data_03-21.xlsx")) |>
  select(ID
         , Name 
         , home_field = `Are you home office or field office staff?` 
         , practice_area = `Practice Area` 
         , training = `Training/Credential specific to data analytics` 
         , advanced_analyses = `Any specific advanced analyses you have conducted?`
         , software = `Any specific competencies with statistical analysis software?` 
         , aspirations = `Any specific aspirations for data analytics?`
         , to_mentor = `Who within MSI are you able to turn to for mentorship/career guidance?`
         , to_tech_ques = `Who within MSI do you turn to most often to discuss or get help on technical questions?`) |>
  mutate(respondent = 1) |>
  filter(!is.na(practice_area)
         & !is.na(to_mentor))

df$practice_area <- df$practice_area |>
  recode("Strategy, Evaluation and Analysis" = "SEA"
         , "Education" = "SEA")

#reworking this data set for mentoring
df1 <- df |>
  filter(practice_area == "SEA"
         & home_field == "Home office") |>
  select(-to_tech_ques)

df1 <- df1 |>
  mutate(to_mentor2 = strsplit(to_mentor, "[,;&]+")) |>
  unnest("to_mentor2") 

#had to separately clean the " and " for some reason
df1 <- df1 |>
  mutate(to_mentor3 = strsplit(to_mentor2, " and ")) |>
  unnest("to_mentor3")

#need to clean up names in to_mentor column
#This allows us to view all unique rows in the column
#unique(df1$to_mentor3)

#this fixes the names of the to_mentor3 column
df1$to_mentor3 <- df1$to_mentor3 |>
  str_trim() |> #eliminates extra spaces before and after text
  recode("Tim R" = "Tim Reilly"
         , "Michelle" = "Michelle Adams-Matson"
         , "Tim R." = "Tim Reilly"
         , "None" = "skip"
         , "NA" = "skip"
         , "N/A" = "skip") 

df1 <- df1 |>
  relocate(to_mentor3, .before = home_field)

#find the individual softwares
softwares <- paste(c("R", "Stata", "SPSS", "Spss", "Nvivo", "Qualtrics", "MaxQDA"
                     , "Python", "ArcGIS", "Excel", "excel", "SAS"
                     , "EpiInfo", "STATA", "Kobo Tool Box", "Dedoose"
                     , "SMath Studio", "Tableau"), collapse = "|")

#create a new column that extracts the names of software used 
#then create another column that unnests any lists
df2 <- df1 |>
  mutate(software1 = str_extract_all(software, pattern = softwares))

#Create a ties df
df1_ties <- df2 |>
  select(Name, to_mentor3) |>
  filter(to_mentor3 != "skip")

#Create a nodes df with all attributes
df1_nodes <- as_tibble(unique(c(df2$Name, df2$to_mentor3))) |>
  filter(value != "skip" &
           !is.na(value))

#Create a nodes df with all attributes
#create the list of nodes
df1_nodes <- as_tibble(unique(c(df1_ties$Name, df1_ties$to_mentor3)))

#join it to the attributes
df2_nodes <- df1_nodes |>
  left_join(df2, by = c("value" = "Name"))

#delete any duplicate nodes
df2_vertices <- subset(df2_nodes, !duplicated(value)) 

###create graph object

df_graph_ment <- graph_from_data_frame(df1_ties
                                       , directed = FALSE
                                       , vertices = df2_vertices)

```

Within the SEA practice area we had `r gorder(df_graph_ment)` nodes in our network consisting of `r gsize(df_graph_ment)` edges.

```{r echo = F, warning = F}

#| column: screen-inset-shaded
#| layout-nrow: 1



#Technical
#SEA only and only those who listed tech advisors

df_tech <- read_xlsx(here::here("network_analysis_sandbox/data/staff_survey_data_03-21.xlsx")) |>
  select(ID
         , Name 
         , home_field = `Are you home office or field office staff?` 
         , practice_area = `Practice Area` 
         , training = `Training/Credential specific to data analytics` 
         , advanced_analyses = `Any specific advanced analyses you have conducted?`
         , software = `Any specific competencies with statistical analysis software?` 
         , aspirations = `Any specific aspirations for data analytics?`
         , to_mentor = `Who within MSI are you able to turn to for mentorship/career guidance?`
         , to_tech_ques = `Who within MSI do you turn to most often to discuss or get help on technical questions?`) |>
  mutate(respondent = 1) |>
  filter(!is.na(practice_area)
         & !is.na(to_tech_ques))

df_tech$practice_area <- df_tech$practice_area |>
  recode("Strategy, Evaluation and Analysis" = "SEA"
         , "Education" = "SEA")

#reworking this data set for mentoring
df_tech1 <- df_tech |>
  filter(practice_area == "SEA"
         & home_field == "Home office") |>
  select(-to_mentor)

df_tech1 <- df_tech1 |>
  mutate(to_tech2 = strsplit(to_tech_ques, "[,;&]+")) |>
  unnest("to_tech2") 

#need to clean up names in to_mentor column
#This allows us to view all unique rows in the column
#unique(df_tech1$to_tech2)

#this fixes the names of the to_mentor3 column
df_tech1$to_tech3 <- df_tech1$to_tech2 |>
  str_trim() |> #eliminates extra spaces before and after text
  recode("No one right now" = "skip"
         , "Dan" = "Dan Killian"
         , "David" = "David Hinkle"
         , "Tim S." = "Tim Shifflett"
         , "None" = "skip"
         , "NA" = "skip"
         , "N/A" = "skip")
         

df_tech1 <- df_tech1 |>
  relocate(to_tech3, .before = home_field)

#find the individual softwares
softwares <- paste(c("R", "Stata", "SPSS", "Spss", "Nvivo", "Qualtrics", "MaxQDA"
                     , "Python", "ArcGIS", "Excel", "excel", "SAS"
                     , "EpiInfo", "STATA", "Kobo Tool Box", "Dedoose"
                     , "SMath Studio", "Tableau"), collapse = "|")

#create a new column that extracts the names of software used 
#then create another column that unnests any lists
df_tech2 <- df_tech1 |>
  mutate(new = str_extract_all(software, pattern = softwares)) |>
  filter(to_tech3 !="skip")

#Create a ties df
df_tech_ties <- df_tech2 |>
  select(Name, to_tech3)



#Create a nodes df with all attributes
#create the list of nodes
df_tech_nodes <- as_tibble(unique(c(df_tech_ties$Name, df_tech_ties$to_tech3)))

#join it to the attributes
df_tech_nodes1 <- df_tech_nodes |>
  left_join(df_tech2, by = c("value" = "Name"))

#delete any duplicate nodes
df_tech_vertices <- subset(df_tech_nodes1, !duplicated(value)) 

df_graph_tech <- graph_from_data_frame(df_tech_ties
                                       , directed = FALSE
                                       , vertices = df_tech_vertices)

#plot graph object of mentor network
ggraph(df_graph_ment, layout = "with_kk") +
  geom_edge_link(color = my_pal[[5]]
                 , alpha = .3) +
  geom_node_point(color = my_pal[[5]]
                  , size = 4) +
  labs(title = "Mentor network among data enthusiasts\nat MSI") +
  theme(legend.position = "none")+
  theme.graph()

#plot graph object of tech network
ggraph(df_graph_tech, layout = "with_kk") +
  geom_edge_link(color = my_pal[[10]]
                 , alpha = .3) +
  geom_node_point(color = my_pal[[10]]
                  , size = 4) +
    labs(title = "Technical advice network among data enthusiasts at MSI"
       , subtitle = "tech-tech-tech-ni-cal") +
  theme.graph() +
  theme(legend.position = "none")


```

Within the SEA practice area we had `r gorder(df_graph_tech)` nodes in our network consisting of `r gsize(df_graph_tech)` edges.

 

```{r}

#| label: fig-charts
#| fig-align="center"
#| column: page

ggraph(df_graph_tech, layout = "with_kk") +
  geom_edge_link(color = my_pal[[10]]
                 , alpha = .3) +
  geom_node_point(color = my_pal[[10]]
                  , size = 4) +
    labs(title = "Technical advice network among data enthusiasts at MSI"
       , subtitle = "tech-tech-tech-ni-cal") +
  theme.graph() +
  theme(legend.position = "none")



```

```{r}
#| column: screen-inset-shaded
#| layout-nrow: 1

plot(cars)
plot(iris)
plot(pressure)
```
### Network statistics

```{r}
#Calculate some network statistics - density, mean distance, betweeness, transitivity, and eigenvector centrality
#calculate the network density
density_ment <- edge_density(df_graph_ment)
#calculate the mean_distance
avg_dist_ment <- mean_distance(df_graph_ment, directed = FALSE)
#calculate the betweeness
b1 <- betweenness(df_graph_ment, directed = FALSE)
between_ment <- mean(b1)
#calculate the transitivity of the network
trans_ment <- transitivity(df_graph_ment)
#eigenvalues vector
e1 <- eigen_centrality(df_graph_ment, directed =FALSE)$vector
#calculate avg. eigenvalue of the network
eigen_ment <- mean(e1)
l <- c("Network", "Avg. Density", "Avg. Distance", "Avg. Transitivity", "Avg. Betweenness", "Avg. Eigenvector")
m <- c("Mentorship", density_ment, avg_dist_ment, trans_ment, between_ment, eigen_ment)
dat <- data.frame(l, m)
dat1 <- pivot_wider(data = dat
                    , names_from = l
                    , values_from = m) |>
  mutate(across(2:6, as.numeric))
#graph statistics table
network_table <- flextable(dat1) |>
  set_header_labels(values = list(
  )) |>
  align(align = "center", part = "all") |>
  colformat_double(digits = 2)
network_table
```

```{r}

#Calculate some network statistics - density, mean distance, betweeness, transitivity, and eigenvector centrality
#calculate the network density
density_tech <- edge_density(df_graph_tech)

#calculate the mean_distance
avg_dist_tech <- mean_distance(df_graph_tech, directed = FALSE)

#calculate the betweeness
b2 <- betweenness(df_graph_tech, directed = FALSE)

between_tech <- mean(b2)
#calculate the transitivity of the network
trans_tech <- transitivity(df_graph_tech)

#eigenvalues vector
e1_tech <- eigen_centrality(df_graph_tech, directed =FALSE)$vector

#calculate avg. eigenvalue of the network
eigen_tech <- mean(e1_tech)

names <- c("Network", "Avg. Density", "Avg. Distance", "Avg. Transitivity", "Avg. Betweenness", "Avg. Eigenvector")
values <- c("Tech guidance", density_tech, avg_dist_tech, trans_tech, between_tech, eigen_tech)

dat_tech <- data.frame(names, values)

dat1_tech <- pivot_wider(data = dat_tech
                    , names_from = names
                    , values_from = values) |>
  mutate(across(2:6, as.numeric))

dat2 <- bind_rows(dat1, dat1_tech)

network_table1 <- flextable(dat2) |>
  set_header_labels(values = list(
  )) |>
  align(align = "center", part = "all") |>
  colformat_double(digits = 2)

network_table1

```

How do these statistics compare with what we would expect from similar networks? We can run some simulations to find out.

```{r}
#simulation of mentorship network 1000x
gl <- vector('list', 1000)

for(i in 1:1000){
  gl[[i]] <- erdos.renyi.game(
    n = gorder(df_graph_ment)
    , p.or.m = edge_density(df_graph_ment)
    , type = "gnp"
  )
}

gl.apls = unlist(lapply(gl, mean_distance, directed=FALSE))

ggplot(data = as.data.frame(gl.apls)) +
  geom_histogram(aes(x = gl.apls), bins = 25
                 , fill = my_pal[[11]]
                 , alpha = .4) +
  geom_vline(xintercept = avg_dist_ment
             , linewidth = 1
             , linetype = "dashed"
             , color = my_pal[[14]]) +
  annotate(x = avg_dist_ment + 1.2, y = 150, label = glue::glue("{round(avg_dist_ment, digits = 2)}, is the average distance \nbetween connections \nin the mentoring network"), geom = "label", color = my_pal[[14]]) +
  geom_segment(aes(x = avg_dist_ment + .6, y = 145, xend = avg_dist_ment +.05, yend = 138),
                  arrow = arrow(length = unit(0.25, "cm"))
               , linewidth = 1
               , color = my_pal[[14]])+
  labs(y = "# of simulations"
       , x = "Average distance between connections"
       , title = "How does our network compare to \nsimilarly structured networks?"
       , subtitle = glue::glue("{mean(gl.apls < avg_dist_ment) * 100}", "% ", "of similar networks have a shorter average distance between \nconnections than the mentoring network"))+
  theme.plot()

#mean(gl.apls < avg_dist_ment)

```
```{r}

#simulation of tech guidance network 1000x
gl_tech <- vector('list', 1000)

for(i in 1:1000){
  gl_tech[[i]] <- erdos.renyi.game(
    n = gorder(df_graph_tech)
    , p.or.m = edge_density(df_graph_tech)
    , type = "gnp"
  )
}

gl_tech.apls = unlist(lapply(gl_tech, mean_distance, directed=FALSE))

ggplot(data = as.data.frame(gl_tech.apls)) +
  geom_histogram(aes(x = gl_tech.apls), bins = 25
                 , fill = my_pal[[11]]
                 , alpha = .4) +
  geom_vline(xintercept = avg_dist_tech
             , linewidth = 1
             , linetype = "dashed"
             , color = my_pal[[14]]) +
  annotate(x = avg_dist_tech + .8, y = 150, label = glue::glue("{round(avg_dist_tech, digits = 2)}, is the average distance \nbetween connections \nin the technical guidance network"), geom = "label", color = my_pal[[14]]) +
  geom_segment(aes(x = avg_dist_tech + .25, y = 145, xend = avg_dist_tech +.05, yend = 138),
                  arrow = arrow(length = unit(0.25, "cm"))
               , linewidth = 1
               , color = my_pal[[14]])+
  labs(y = "# of simulations"
       , x = "Average distance between connections"
       , title = "How does our network compare to \nsimilarly structured networks?"
       , subtitle = glue::glue("{mean(gl_tech.apls < avg_dist_tech) * 100}", "% ", "of similar networks have a shorter average distance between \nconnections than the technical guidance network"))+
  theme.plot()


#mean(gl_tech.apls < avg_dist_tech)

```



